{"version":3,"file":"static/js/776.19857f74.chunk.js","mappings":"8MA6CA,UA/BsC,SAAJA,GAAkC,IAA5BC,EAAaD,EAAbC,cAAeC,EAAMF,EAANE,OACnDC,EAAAA,GAAAA,eAAoBC,EAAAA,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,KAEjBC,IADmBC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,IAAIC,UAAU,KAC5BC,EAAAA,EAAAA,MAAgBC,GAAAC,EAAAA,EAAAA,GAAAP,EAAA,GAA5CQ,EAAWF,EAAA,GAAaA,EAAA,GAS/B,OACIG,EAAAA,EAAAA,KAACC,EAAAA,GAAiB,CAACC,IAAKjB,EAAckB,UAClCH,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAAAD,UACNE,EAAAA,EAAAA,MAACC,EAAAA,GAAiB,CAAAH,SAAA,EACdE,EAAAA,EAAAA,MAACE,EAAAA,GAAQ,CAAAJ,SAAA,CAAC,gGAAiBH,EAAAA,EAAAA,KAAA,SAAK,yHAAsBA,EAAAA,EAAAA,KAAA,SAAK,+GAAsBA,EAAAA,EAAAA,KAAA,SAAK,6EAEtFK,EAAAA,EAAAA,MAACG,EAAAA,GAAa,CAAAL,SAAA,CAAC,yKAA8BH,EAAAA,EAAAA,KAAA,SAAK,yJAA6BA,EAAAA,EAAAA,KAAA,SAAK,4EAGpFA,EAAAA,EAAAA,KAACS,EAAAA,GAAK,CAAAN,SAAC,wGACPH,EAAAA,EAAAA,KAACU,EAAAA,GAAM,CAAAP,SAAC,qFACRH,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACT,IAAKhB,EAAQ0B,QAlBL,WAC5Bb,IACAV,GAASwB,EAAAA,EAAAA,IAAgB,CAACC,QAAQ,IACtC,EAesEX,SAAC,gGAK3E,C","sources":["pages/home/headrMain/HeadrMain.tsx"],"sourcesContent":["import React, {FC, useEffect, useLayoutEffect, useRef} from 'react'\r\nimport {Container} from '../../../common/style/Container'\r\nimport {Button, HeaderMainContent, HeaderMainWrapper, SubTitle, SubTitleSmall, Title, Title2} from './style'\r\nimport {useAppDispatch, useAppSelector} from \"../../../common/hook\";\r\nimport {setIsOpenFormAC} from \"../../../app/app-reduser\";\r\nimport {useScrollBlock} from \"../../../common/hook/use-scroll-block\";\r\nimport {gsap} from \"gsap\";\r\nimport {CSSPlugin} from \"gsap/CSSPlugin\";\r\n\r\ntype HeadrMainProps = {\r\n    headerAnimate: React.RefObject<HTMLInputElement>;\r\n    button: React.RefObject<HTMLButtonElement>;\r\n}\r\n\r\nconst HeadrMain:FC<HeadrMainProps>  = ({headerAnimate, button}) => {\r\n    gsap.registerPlugin(CSSPlugin);\r\n    const dispatch = useAppDispatch()\r\n    const isOpenForm = useAppSelector(state => state.app.isOpenForm)\r\n    const [blockScroll, allowScroll] = useScrollBlock();\r\n\r\n    const onClickFormModalHandler = () => {\r\n        blockScroll()\r\n        dispatch(setIsOpenFormAC({isOpen: true}))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <HeaderMainWrapper ref={headerAnimate}>\r\n            <Container>\r\n                <HeaderMainContent>\r\n                    <SubTitle>МЫ ПРЕДОСТАВЛЯЕМ <br/> КАЧЕСТВЕННЫЕ АУТСОРС <br/> УСЛУГИ  ДЛЯ КЛИЕНТОВ <br/> ПО ВСЕМУ МИРУ.\r\n                    </SubTitle>\r\n                    <SubTitleSmall>МЫ ПРЕДОСТАВЛЯЕМ КАЧЕСТВЕННЫЕ <br/> АУТСОРС УСЛУГИ ДЛЯ КЛИЕНТОВ <br/>\r\n                        ПО ВСЕМУ МИРУ.\r\n                    </SubTitleSmall>\r\n                    <Title>Вот где начинаются</Title>\r\n                    <Title2>ваши свершения</Title2>\r\n                    <Button ref={button} onClick={onClickFormModalHandler}>Оставить заявку</Button>\r\n                </HeaderMainContent>\r\n            </Container>\r\n        </HeaderMainWrapper>\r\n    )\r\n}\r\n\r\nexport default HeadrMain\r\n"],"names":["_ref","headerAnimate","button","gsap","CSSPlugin","dispatch","useAppDispatch","_useScrollBlock","useAppSelector","state","app","isOpenForm","useScrollBlock","_useScrollBlock2","_slicedToArray","blockScroll","_jsx","HeaderMainWrapper","ref","children","Container","_jsxs","HeaderMainContent","SubTitle","SubTitleSmall","Title","Title2","Button","onClick","setIsOpenFormAC","isOpen"],"sourceRoot":""}